import { Container, Registry, ServiceLocator, ComponentInstaller } from "@nivinjoseph/n-ject";
import { EventBus } from "./event-bus";
import { EventSubMgr } from "./event-sub-mgr";
import { Disposable } from "@nivinjoseph/n-util";
import { EventRegistration } from "./event-registration";
import { Topic } from "./topic";
import { EdaEvent } from "./eda-event";
import { EdaEventHandler } from "./eda-event-handler";
export declare class EdaManager implements Disposable {
    private readonly _container;
    private readonly _topics;
    private readonly _topicMap;
    private readonly _eventMap;
    private _compressionEnabled;
    private _metricsEnabled;
    private _partitionKeyMapper;
    private _eventBusRegistered;
    private _eventSubMgrRegistered;
    private _consumerName;
    private _consumerGroupId;
    private _isDisposed;
    private _isBootstrapped;
    static get eventBusKey(): string;
    static get eventSubMgrKey(): string;
    get containerRegistry(): Registry;
    get serviceLocator(): ServiceLocator;
    get topics(): ReadonlyArray<Topic>;
    get eventMap(): ReadonlyMap<string, EventRegistration>;
    get consumerName(): string;
    get consumerGroupId(): string | null;
    get compressionEnabled(): boolean;
    get metricsEnabled(): boolean;
    constructor(container?: Container);
    useInstaller(installer: ComponentInstaller): this;
    useConsumerName(name: string): this;
    registerTopics(...topics: Topic[]): this;
    enableCompression(): this;
    enableMetrics(): this;
    usePartitionKeyMapper(func: (event: EdaEvent) => string): this;
    registerEventHandlers<TClass extends new (...args: any[]) => EdaEventHandler<any>>(...eventHandlerClasses: TClass[]): this;
    registerEventBus<TClass extends new (...args: any[]) => EventBus>(eventBus: EventBus | TClass): this;
    registerEventSubscriptionManager<TClass extends new (...args: any[]) => EventSubMgr>(eventSubMgr: EventSubMgr | TClass, consumerGroupId: string): this;
    bootstrap(): void;
    beginConsumption(): Promise<void>;
    mapToPartition(topic: string, event: EdaEvent): number;
    dispose(): Promise<void>;
}
