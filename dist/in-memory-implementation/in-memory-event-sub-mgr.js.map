{"version":3,"file":"in-memory-event-sub-mgr.js","sourceRoot":"","sources":["../../src/in-memory-implementation/in-memory-event-sub-mgr.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AACA,gDAA+D;AAE/D,0DAAiD;AACjD,gDAA0D;AAC1D,+DAAyD;AAIzD,0DAAyF;AACzF,gDAA4C;AAI5C,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;IAQ5B,YAAmB,MAAc;QAJzB,gBAAW,GAAG,KAAK,CAAC;QACpB,mBAAc,GAAG,KAAK,CAAC;QAK3B,mBAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAC1D,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QAEtB,IAAI,CAAC,UAAU,GAAG,IAAI,4BAAmB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAQ,CAAC,CAAC,CAAC;IACtF,CAAC;IAGM,UAAU,CAAC,SAAoB,EAAE,QAAkB;QAEtD,IAAI,IAAI,CAAC,WAAW;YAChB,MAAM,IAAI,qCAAuB,CAAC,IAAI,CAAC,CAAC;QAE5C,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC,YAAY,CAAC,kBAAS,CAAC,CAAC;QACvE,mBAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAC9D,mBAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,6BAA6B,CAAC,CAAC;QAElF,MAAM,gBAAgB,GAAG,SAAS,CAAC,OAAO,CAAmB,wBAAU,CAAC,WAAW,CAAC,CAAC;QACrF,IAAI,CAAC,CAAC,gBAAgB,YAAY,sCAAgB,CAAC;YAC/C,MAAM,IAAI,kCAAoB,CAAC,0DAA0D,CAAC,CAAC;QAE/F,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE;YAE7B,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;gBACjB,OAAO;YAEX,MAAM,KAAK,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;YAChC,CAAE,CAAC,MAAM,GAAG,KAAK,CAAC;YAExB,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAE/B,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAA4B,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAC3E,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,GAAS,EAAE;gBAErC,IACA;oBACI,MAAM,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBAC3B;wBAED;oBACI,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;iBACzB;YACL,CAAC,CAAA,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC/B,CAAC;IAEY,OAAO;;YAEhB,IAAI,IAAI,CAAC,WAAW;gBAChB,OAAO;YAEX,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAExB,MAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC1C,CAAC;KAAA;IAES,eAAe,CAAC,KAAY,EAAE,KAAe;QAEnD,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QACxD,mBAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;IAC5D,CAAC;CACJ,CAAA;AAxEY,mBAAmB;IAD/B,eAAM,CAAC,QAAQ,CAAC;;GACJ,mBAAmB,CAwE/B;AAxEY,kDAAmB","sourcesContent":["import { EventSubMgr } from \"../event-sub-mgr\";\nimport { Container, inject, Scope } from \"@nivinjoseph/n-ject\";\nimport { EventMap } from \"../event-map\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport { BackgroundProcessor } from \"@nivinjoseph/n-util\";\nimport { InMemoryEventBus } from \"./in-memory-event-bus\";\nimport { EdaEventHandler } from \"../eda-event-handler\";\nimport { EdaEvent } from \"../eda-event\";\nimport { Logger } from \"@nivinjoseph/n-log\";\nimport { ObjectDisposedException, ApplicationException } from \"@nivinjoseph/n-exception\";\nimport { EdaManager } from \"../eda-manager\";\n\n// public\n@inject(\"Logger\")\nexport class InMemoryEventSubMgr implements EventSubMgr\n{\n    private readonly _logger: Logger;\n    private readonly _processor: BackgroundProcessor;\n    private _isDisposed = false;\n    private _isInitialized = false;\n\n\n    public constructor(logger: Logger)\n    {\n        given(logger, \"logger\").ensureHasValue().ensureIsObject();\n        this._logger = logger;\n        \n        this._processor = new BackgroundProcessor((e) => this._logger.logError(e as any));\n    }\n    \n    \n    public initialize(container: Container, eventMap: EventMap): void\n    {\n        if (this._isDisposed)\n            throw new ObjectDisposedException(this);\n        \n        given(container, \"container\").ensureHasValue().ensureIsType(Container);\n        given(eventMap, \"eventMap\").ensureHasValue().ensureIsObject();\n        given(this, \"this\").ensure(t => !t._isInitialized, \"initializing more than once\");\n        \n        const inMemoryEventBus = container.resolve<InMemoryEventBus>(EdaManager.eventBusKey);\n        if (!(inMemoryEventBus instanceof InMemoryEventBus))\n            throw new ApplicationException(\"InMemoryEventSubMgr can only work with InMemoryEventBus.\");\n        \n        inMemoryEventBus.onPublish((e) =>\n        {\n            if (!eventMap[e.name])\n                return;\n            \n            const scope = container.createScope();\n            (<any>e).$scope = scope;\n            \n            this.onEventReceived(scope, e);\n            \n            const handler = scope.resolve<EdaEventHandler<EdaEvent>>(eventMap[e.name]);\n            this._processor.processAction(async () =>\n            {\n                try \n                {\n                    await handler.handle(e);    \n                }\n                finally\n                {\n                    await scope.dispose();\n                }\n            });\n        });\n        \n        this._isInitialized = true;\n    }\n    \n    public async dispose(): Promise<void>\n    {\n        if (this._isDisposed)\n            return;\n        \n        this._isDisposed = true;\n        \n        await  this._processor.dispose(false);\n    }\n    \n    protected onEventReceived(scope: Scope, event: EdaEvent): void\n    {\n        given(scope, \"scope\").ensureHasValue().ensureIsObject();\n        given(event, \"event\").ensureHasValue().ensureIsObject();\n    }\n}"]}