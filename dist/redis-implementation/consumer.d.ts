import { Disposable } from "@nivinjoseph/n-util";
import * as Redis from "redis";
import { EdaManager } from "../eda-manager";
import { Broker } from "./broker";
export declare class Consumer implements Disposable {
    private readonly _edaPrefix;
    private readonly _defaultDelayMS;
    private readonly _client;
    private readonly _manager;
    private readonly _logger;
    private readonly _topic;
    private readonly _partition;
    private readonly _id;
    private readonly _cleanKeys;
    private _isDisposed;
    private _trackedKeysSet;
    private _consumePromise;
    private _broker;
    get id(): string;
    constructor(client: Redis.RedisClient, manager: EdaManager, topic: string, partition: number);
    registerBroker(broker: Broker): void;
    consume(): void;
    dispose(): Promise<void>;
    protected beginConsume(): Promise<void>;
    private _attemptRoute;
    protected _fetchPartitionWriteIndex(): Promise<number>;
    protected _fetchConsumerPartitionReadIndex(): Promise<number>;
    protected _incrementConsumerPartitionReadIndex(index?: number): Promise<void>;
    private _retrieveEvent;
    private _batchRetrieveEvents;
    private track;
    private _saveTrackedKeys;
    private _loadTrackedKeys;
    private decompressEvent;
    private removeKeys;
}
