{"version":3,"file":"eda-manager.js","sourceRoot":"","sources":["../src/eda-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { EdaConfig } from \"./eda-config\";\nimport { given } from \"@nivinjoseph/n-defensive\";\nimport { Container } from \"@nivinjoseph/n-ject\";\nimport { EventMap } from \"./event-map\";\nimport { eventSymbol } from \"./event\";\nimport { ApplicationException } from \"@nivinjoseph/n-exception\";\nimport { EventBus } from \"./event-bus\";\nimport { EventSubMgr } from \"./event-sub-mgr\";\nimport { Disposable } from \"@nivinjoseph/n-util\";\n\n// public\nexport class EdaManager implements Disposable\n{\n    private readonly _eventBusKey = \"EventBus\";\n    private readonly _eventSubMgrKey = \"EventSubMgr\";\n    private readonly _container: Container;\n    private readonly _eventMap: EventMap;\n    \n    private readonly _eventBus: EventBus;\n    private readonly _eventSubMgr: EventSubMgr;\n    \n    \n    public get eventBusKey(): string { return this._eventBusKey; }\n    public get eventBus(): EventBus { return this._eventBus; }\n    \n    public get eventSubMgrKey(): string { return this._eventSubMgrKey; }\n    public get eventSubMgr(): EventSubMgr { return this._eventSubMgr; }\n    \n    \n    public constructor(config: EdaConfig)\n    {\n        given(config, \"config\").ensureHasValue().ensureIsObject();\n        \n        this._container = new Container();\n        if (config.iocInstaller)\n            this._container.install(config.iocInstaller);\n        \n        this._eventMap = this.initialize(config.eventBus, config.eventSubMgr, config.eventHandlerClasses);\n        \n        this._eventBus = this._container.resolve<EventBus>(this._eventBusKey);\n        this._eventSubMgr = this._container.resolve<EventSubMgr>(this._eventSubMgrKey);\n        \n        this._eventSubMgr.initialize(this._container, this._eventMap, this._eventBus);\n    }\n    \n    \n    public async dispose(): Promise<void>\n    {\n        await this._eventBus.dispose();\n        await this._eventSubMgr.dispose();\n        await this._container.dispose();\n    }\n    \n    \n    private initialize(eventBus: EventBus | Function, eventSubMgr: EventSubMgr | Function,\n        eventHandlerClasses: ReadonlyArray<Function>): EventMap\n    {\n        given(eventBus, \"eventBus\").ensureHasValue();\n        given(eventSubMgr, \"eventSubMgr\").ensureHasValue();\n        given(eventHandlerClasses, \"eventHandlerClasses\").ensureHasValue().ensureIsArray();\n        \n        if (typeof eventBus === \"function\")\n            this._container.registerSingleton(this._eventBusKey, eventBus);\n        else\n            this._container.registerInstance(this._eventBusKey, eventBus);\n        \n        if (typeof eventSubMgr === \"function\")\n            this._container.registerSingleton(this._eventSubMgrKey, eventSubMgr);\n        else\n            this._container.registerInstance(this._eventSubMgrKey, eventSubMgr);\n        \n        const eventRegistrations = eventHandlerClasses.map(t => new EventHandlerRegistration(t));\n        const eventMap: EventMap = {};\n        \n        eventRegistrations.forEach(t =>\n        {\n            if (eventMap[t.eventTypeName])\n                throw new ApplicationException(`Multiple handlers detected for event '${t.eventTypeName}'.`);\n            \n            eventMap[t.eventTypeName] = t.eventHandlerTypeName;\n            this._container.registerScoped(t.eventHandlerTypeName, t.eventHandlerType);\n        });\n        \n        this._container.bootstrap();\n        \n        return eventMap;\n    }\n}\n\nclass EventHandlerRegistration\n{\n    private readonly _eventTypeName: string;\n    private readonly _eventHandlerTypeName: string;\n    private readonly _eventHandlerType: Function;\n\n\n    public get eventTypeName(): string { return this._eventTypeName; }\n    public get eventHandlerTypeName(): string { return this._eventHandlerTypeName; }\n    public get eventHandlerType(): Function { return this._eventHandlerType; }\n\n\n    public constructor(eventHandlerType: Function)\n    {\n        given(eventHandlerType, \"eventHandlerType\").ensureHasValue().ensureIsFunction();\n\n        this._eventHandlerTypeName = (<Object>eventHandlerType).getTypeName();\n        this._eventHandlerType = eventHandlerType;\n\n        if (!Reflect.hasOwnMetadata(eventSymbol, this._eventHandlerType))\n            throw new ApplicationException(\"EventHandler '{0}' does not have event applied.\"\n                .format(this._eventHandlerTypeName));\n\n        this._eventTypeName = Reflect.getOwnMetadata(eventSymbol, this._eventHandlerType);\n    }\n}"]}